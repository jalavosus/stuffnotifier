// Code generated by "stringer -type FlightType,IdentifierType,AirportType -linecomment -output models_string.go"; DO NOT EDIT.

package flightaware

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownFlightType-0]
	_ = x[GeneralAviation-1]
	_ = x[Airline-2]
}

const _FlightType_name = "unknownGeneral_AviationAirline"

var _FlightType_index = [...]uint8{0, 7, 23, 30}

func (i FlightType) String() string {
	if i >= FlightType(len(_FlightType_index)-1) {
		return "FlightType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FlightType_name[_FlightType_index[i]:_FlightType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DesignatorIdent-0]
	_ = x[RegistrationIdent-1]
	_ = x[FaFlightIdIdent-2]
}

const _IdentifierType_name = "designatorregistrationfa_flight_id"

var _IdentifierType_index = [...]uint8{0, 10, 22, 34}

func (i IdentifierType) String() string {
	if i >= IdentifierType(len(_IdentifierType_index)-1) {
		return "IdentifierType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _IdentifierType_name[_IdentifierType_index[i]:_IdentifierType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UnknownAirportType-0]
	_ = x[Airport-1]
	_ = x[Heliport-2]
	_ = x[SeaplaneBase-3]
	_ = x[Ultralight-4]
	_ = x[Stolport-5]
	_ = x[Gliderport-6]
	_ = x[BalloonPort-7]
}

const _AirportType_name = "unknownAirportHeliportSeaplane BaseUltralightStolportGliderportBalloonPort"

var _AirportType_index = [...]uint8{0, 7, 14, 22, 35, 45, 53, 63, 74}

func (i AirportType) String() string {
	if i >= AirportType(len(_AirportType_index)-1) {
		return "AirportType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AirportType_name[_AirportType_index[i]:_AirportType_index[i+1]]
}
